// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metacore/txin.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Txin struct {
	Creator          string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index            string   `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	TxHash           string   `protobuf:"bytes,3,opt,name=txHash,proto3" json:"txHash,omitempty"`
	SourceAsset      string   `protobuf:"bytes,4,opt,name=sourceAsset,proto3" json:"sourceAsset,omitempty"`
	SourceAmount     uint64   `protobuf:"varint,5,opt,name=sourceAmount,proto3" json:"sourceAmount,omitempty"`
	MBurnt           uint64   `protobuf:"varint,6,opt,name=mBurnt,proto3" json:"mBurnt,omitempty"`
	DestinationAsset string   `protobuf:"bytes,7,opt,name=destinationAsset,proto3" json:"destinationAsset,omitempty"`
	FromAddress      string   `protobuf:"bytes,8,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`
	ToAddress        string   `protobuf:"bytes,9,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	BlockHeight      uint64   `protobuf:"varint,10,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	Signers          []string `protobuf:"bytes,11,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *Txin) Reset()         { *m = Txin{} }
func (m *Txin) String() string { return proto.CompactTextString(m) }
func (*Txin) ProtoMessage()    {}
func (*Txin) Descriptor() ([]byte, []int) {
	return fileDescriptor_93184ce4f3b6d324, []int{0}
}
func (m *Txin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Txin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Txin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Txin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Txin.Merge(m, src)
}
func (m *Txin) XXX_Size() int {
	return m.Size()
}
func (m *Txin) XXX_DiscardUnknown() {
	xxx_messageInfo_Txin.DiscardUnknown(m)
}

var xxx_messageInfo_Txin proto.InternalMessageInfo

func (m *Txin) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Txin) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Txin) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *Txin) GetSourceAsset() string {
	if m != nil {
		return m.SourceAsset
	}
	return ""
}

func (m *Txin) GetSourceAmount() uint64 {
	if m != nil {
		return m.SourceAmount
	}
	return 0
}

func (m *Txin) GetMBurnt() uint64 {
	if m != nil {
		return m.MBurnt
	}
	return 0
}

func (m *Txin) GetDestinationAsset() string {
	if m != nil {
		return m.DestinationAsset
	}
	return ""
}

func (m *Txin) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *Txin) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *Txin) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *Txin) GetSigners() []string {
	if m != nil {
		return m.Signers
	}
	return nil
}

func init() {
	proto.RegisterType((*Txin)(nil), "MetaProtocol.metacore.metacore.Txin")
}

func init() { proto.RegisterFile("metacore/txin.proto", fileDescriptor_93184ce4f3b6d324) }

var fileDescriptor_93184ce4f3b6d324 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x93, 0x36, 0x6d, 0xcd, 0xd6, 0x83, 0xac, 0x45, 0x16, 0x91, 0x35, 0xf4, 0x54, 0x04,
	0x1b, 0xd0, 0x27, 0x68, 0x4f, 0x3d, 0x28, 0x48, 0xf1, 0xe4, 0x2d, 0x4d, 0xd6, 0x74, 0xb1, 0xd9,
	0x29, 0xbb, 0x13, 0x88, 0x6f, 0xe1, 0x63, 0xf5, 0xd8, 0xa3, 0x78, 0x10, 0x69, 0x5f, 0x44, 0xb2,
	0x69, 0xda, 0x8a, 0xb7, 0xff, 0xff, 0xfe, 0x9d, 0x9d, 0x81, 0x9f, 0x9c, 0x67, 0x02, 0xa3, 0x18,
	0xb4, 0x08, 0xb1, 0x90, 0x6a, 0xb8, 0xd4, 0x80, 0x40, 0xf9, 0xa3, 0xc0, 0xe8, 0xa9, 0x94, 0x31,
	0x2c, 0x86, 0xf5, 0x8b, 0xbd, 0xb8, 0xec, 0xa5, 0x90, 0x82, 0x7d, 0x1a, 0x96, 0xaa, 0x9a, 0xea,
	0x7f, 0x35, 0x88, 0xf7, 0x5c, 0x48, 0x45, 0x19, 0xe9, 0xc4, 0x5a, 0x44, 0x08, 0x9a, 0xb9, 0x81,
	0x3b, 0xf0, 0xa7, 0xb5, 0xa5, 0x3d, 0xd2, 0x92, 0x2a, 0x11, 0x05, 0x6b, 0x58, 0x5e, 0x19, 0x7a,
	0x41, 0xda, 0x58, 0x4c, 0x22, 0x33, 0x67, 0x4d, 0x8b, 0x77, 0x8e, 0x06, 0xa4, 0x6b, 0x20, 0xd7,
	0xb1, 0x18, 0x19, 0x23, 0x90, 0x79, 0x36, 0x3c, 0x46, 0xb4, 0x4f, 0x4e, 0x77, 0x36, 0x83, 0x5c,
	0x21, 0x6b, 0x05, 0xee, 0xc0, 0x9b, 0xfe, 0x61, 0xe5, 0xef, 0xd9, 0x38, 0xd7, 0x0a, 0x59, 0xdb,
	0xa6, 0x3b, 0x47, 0x6f, 0xc8, 0x59, 0x22, 0x0c, 0x4a, 0x15, 0xa1, 0x04, 0x55, 0xad, 0xe8, 0xd8,
	0x15, 0xff, 0x78, 0x79, 0xc9, 0xab, 0x86, 0x6c, 0x94, 0x24, 0x5a, 0x18, 0xc3, 0x4e, 0xaa, 0x4b,
	0x8e, 0x10, 0xbd, 0x22, 0x3e, 0x42, 0x9d, 0xfb, 0x36, 0x3f, 0x80, 0x72, 0x7e, 0xb6, 0x80, 0xf8,
	0x6d, 0x22, 0x64, 0x3a, 0x47, 0x46, 0xec, 0x21, 0xc7, 0x88, 0x72, 0xd2, 0x31, 0x32, 0x55, 0x42,
	0x1b, 0xd6, 0x0d, 0x9a, 0x03, 0x7f, 0xec, 0xad, 0xbe, 0xaf, 0x9d, 0x69, 0x0d, 0xc7, 0x0f, 0xab,
	0x0d, 0x77, 0xd7, 0x1b, 0xee, 0xfe, 0x6c, 0xb8, 0xfb, 0xb1, 0xe5, 0xce, 0x7a, 0xcb, 0x9d, 0xcf,
	0x2d, 0x77, 0x5e, 0xee, 0x52, 0x89, 0xf3, 0x7c, 0x36, 0x8c, 0x21, 0x0b, 0xcb, 0xde, 0x6e, 0xeb,
	0xe2, 0xc2, 0x7d, 0xb5, 0xc5, 0x41, 0xe2, 0xfb, 0x52, 0x98, 0x59, 0xdb, 0x36, 0x76, 0xff, 0x1b,
	0x00, 0x00, 0xff, 0xff, 0x8f, 0xc4, 0xc7, 0x55, 0xfe, 0x01, 0x00, 0x00,
}

func (m *Txin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Txin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Txin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTxin(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTxin(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x50
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTxin(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTxin(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DestinationAsset) > 0 {
		i -= len(m.DestinationAsset)
		copy(dAtA[i:], m.DestinationAsset)
		i = encodeVarintTxin(dAtA, i, uint64(len(m.DestinationAsset)))
		i--
		dAtA[i] = 0x3a
	}
	if m.MBurnt != 0 {
		i = encodeVarintTxin(dAtA, i, uint64(m.MBurnt))
		i--
		dAtA[i] = 0x30
	}
	if m.SourceAmount != 0 {
		i = encodeVarintTxin(dAtA, i, uint64(m.SourceAmount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SourceAsset) > 0 {
		i -= len(m.SourceAsset)
		copy(dAtA[i:], m.SourceAsset)
		i = encodeVarintTxin(dAtA, i, uint64(len(m.SourceAsset)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTxin(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTxin(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTxin(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxin(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Txin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTxin(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTxin(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTxin(uint64(l))
	}
	l = len(m.SourceAsset)
	if l > 0 {
		n += 1 + l + sovTxin(uint64(l))
	}
	if m.SourceAmount != 0 {
		n += 1 + sovTxin(uint64(m.SourceAmount))
	}
	if m.MBurnt != 0 {
		n += 1 + sovTxin(uint64(m.MBurnt))
	}
	l = len(m.DestinationAsset)
	if l > 0 {
		n += 1 + l + sovTxin(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTxin(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTxin(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTxin(uint64(m.BlockHeight))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTxin(uint64(l))
		}
	}
	return n
}

func sovTxin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxin(x uint64) (n int) {
	return sovTxin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Txin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Txin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Txin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAmount", wireType)
			}
			m.SourceAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MBurnt", wireType)
			}
			m.MBurnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MBurnt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxin = fmt.Errorf("proto: unexpected end of group")
)
